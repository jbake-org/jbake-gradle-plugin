/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2014-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


plugins {
    id 'idea'
    id 'groovy'
    id 'java-gradle-plugin'
    id 'org.kordamp.gradle.project' version '0.29.0'
    id 'org.kordamp.gradle.bintray' version '0.29.0'
    id 'com.gradle.plugin-publish'  version '0.10.1'
    id 'com.github.kt3k.coveralls'  version '2.8.4'
}

buildScan {
    termsOfServiceUrl   = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = '**undefined**'
if (!project.hasProperty('bintrayApiKey'))   ext.bintrayApiKey   = '**undefined**'

config {
    release = (project.findProperty('release') ?: false).toBoolean()

    info {
        name          = project.name
        vendor        = 'JBake'
        description   = project.project_description
        inceptionYear = '2014'
        tags          = ['jbake', 'site-generator']

        links {
            website      = project.project_url
            issueTracker = "${project.project_url}/issues"
            scm          = "${project.project_url}.git"
        }

        specification {
            enabled = false
        }

        implementation {
            enabled = false
        }

        people {
            person {
                id    = 'melix'
                name  = 'Cedric Champeau'
                roles = ['developer']
            }
            person {
                id    = 'aalmiray'
                name  = 'Andres Almiray'
                roles = ['developer']
            }
        }
    }

    javadoc {
        enabled = false
    }

    groovydoc {
        replaceJavadoc = true
        options {
            link 'https://docs.gradle.org/4.0/javadoc/', 'org.gradle.'
        }
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    bintray {
        enabled       = true
        userOrg       = project.bintray_org
        name          = project.name
        skipMavenSync = true
        credentials {
            username = project.bintrayUsername
            password = project.bintrayApiKey
        }
    }
}

repositories {
    jcenter()
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

dependencies {
    implementation gradleApi()
    implementation "com.github.zafarkhaja:java-semver:$semverVersion"
    compileOnly "org.eclipse.jetty:jetty-server:$jettyVersion"
    compileOnly "org.jbake:jbake-core:$jbakeVersion"
    testImplementation("org.spockframework:spock-core:$spockVersion") {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation "commons-io:commons-io:$commonsIoVersion"
}

compileGroovy {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

project.tasks.withType(Test) {
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }

    testLogging {
        showStandardStreams = true
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Test results ${project.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            }
        }
    }

    def args = ['-Xms512m', '-Xmx3g', '-Dorientdb.installCustomFormatter=false=false']

    /**
     * AppVeyor breaks with mockito throwing a java.lang.OutOfMemoryError: PermGen space
     */
    if (JavaVersion.current().java7) {
        args << '-XX:MaxPermSize=2g'
    }

    /**
     * jdk9 build is unable to determine the amount of MaxDirectMemorySize
     * See https://pastebin.com/ECvQeHx0
     */
    if (JavaVersion.current().java9Compatible) {
        args << '-XX:MaxDirectMemorySize=2g'
    }
    jvmArgs args
}

jacoco {
    toolVersion = jacocoVersion
}

license {
    exclude '**/*.woff'
    exclude '**/*.eot'
    exclude '**/*.ttf'
    exclude '**/*.md'
    exclude '**/*.adoc'
    exclude '**/*.svg'
    exclude '**/*.ico'
}

licenseTest {
    source -= sourceSets.test.resources
}

bintray {
    pkg {
        version {
            attributes = ['gradle-plugin': "${project.pluginId}:${project.group}:${project.name}"]
        }
    }
}

gradlePlugin {
    plugins {
        jbakePlugin {
            id                  = project.pluginId
            implementationClass = project.pluginImplementationClass
        }
    }
}

pluginBundle {
    website     = project.project_url
    vcsUrl      = "${project.project_url}.git"
    description = project.project_description
    tags        = ['jbake', 'site-generator']

    plugins {
        jbakePlugin {
            id          = project.pluginId
            displayName = project.displayName
        }
    }

    mavenCoordinates {
        groupId    = project.group
        artifactId = project.name
        version    = project.version
    }
}

task publishRelease(dependsOn: [bintrayUpload, publishPlugins]) {}
